//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWeaponAnimator;

    public static Entitas.IMatcher<GameEntity> WeaponAnimator {
        get {
            if (_matcherWeaponAnimator == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.WeaponAnimator);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWeaponAnimator = matcher;
            }

            return _matcherWeaponAnimator;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Thronefall.Gameplay.Combat.WeaponAnimatorComponent weaponAnimator { get { return (Thronefall.Gameplay.Combat.WeaponAnimatorComponent)GetComponent(GameComponentsLookup.WeaponAnimator); } }
    public Thronefall.Gameplay.Combat.WeaponAnimator WeaponAnimator { get { return weaponAnimator.Value; } }
    public bool hasWeaponAnimator { get { return HasComponent(GameComponentsLookup.WeaponAnimator); } }

    public GameEntity AddWeaponAnimator(Thronefall.Gameplay.Combat.WeaponAnimator newValue) {
        var index = GameComponentsLookup.WeaponAnimator;
        var component = (Thronefall.Gameplay.Combat.WeaponAnimatorComponent)CreateComponent(index, typeof(Thronefall.Gameplay.Combat.WeaponAnimatorComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceWeaponAnimator(Thronefall.Gameplay.Combat.WeaponAnimator newValue) {
        var index = GameComponentsLookup.WeaponAnimator;
        var component = (Thronefall.Gameplay.Combat.WeaponAnimatorComponent)CreateComponent(index, typeof(Thronefall.Gameplay.Combat.WeaponAnimatorComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveWeaponAnimator() {
        RemoveComponent(GameComponentsLookup.WeaponAnimator);
        return this;
    }
}
